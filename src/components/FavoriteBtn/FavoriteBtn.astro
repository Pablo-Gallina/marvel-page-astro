---
import { Icon } from "astro-icon/components";

interface FavoriteProps {
  name: string;
  id: number;
}

const { name, id } = Astro.props as FavoriteProps;
---

<div class="relative group">
  <button
    id="favorite-button"
    class="text-red-500 hover:text-red-700 hover:scale-110 transition-transform hover:cursor-pointer"
    data-favorite-id={id}
    data-favorite-name={name}
  >
    <Icon data-pin name="star" size={30} />
    <Icon data-unpin name="star-fill" size={30} class="hidden" />
  </button>

  <span
    class="absolute left-1/2 -translate-x-1/2 -top-8 px-2 py-1 rounded bg-gray-800 text-white text-xs opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none z-10 whitespace-nowrap"
  >
    Add to Favorites
  </span>
</div>

<script>
  interface FavoriteProps {
    name: string;
    id: number;
  }

  const handlePageLoad = () => {
    let favoriteCharacter: FavoriteProps[] = JSON.parse(
      localStorage.getItem("favoriteCharacters") || "[]"
    );

    const btnFavorite = document.querySelector(
      "#favorite-button"
    ) as HTMLButtonElement;

    if (!btnFavorite) return console.error("Favorite button not found");

    const nameCharacter = btnFavorite.getAttribute("data-favorite-name")!;
    const idCharacter = btnFavorite.getAttribute("data-favorite-id")!;

    const toggleFavorite = () => {
      const isFavorite = favoriteCharacter.some(
        (char) =>
          char.name === nameCharacter && char.id === parseInt(idCharacter)
      );

      if (isFavorite) {
        favoriteCharacter = favoriteCharacter.filter(
          (char) =>
            !(char.name === nameCharacter && char.id === parseInt(idCharacter))
        );
      } else {
        favoriteCharacter.push({
          name: nameCharacter,
          id: +idCharacter,
        });
      }

      localStorage.setItem(
        "favoriteCharacters",
        JSON.stringify(favoriteCharacter)
      );
    };

    const pinIcon = btnFavorite.querySelector("[data-pin]") as HTMLElement;
    const unpinIcon = btnFavorite.querySelector("[data-unpin]") as HTMLElement;

    const isFavorite = favoriteCharacter.some(
      (char) => char.name === nameCharacter && char.id === parseInt(idCharacter)
    );
    if (isFavorite) {
      pinIcon.classList.add("hidden");
      unpinIcon.classList.remove("hidden");
    }

    btnFavorite.addEventListener("click", () => {
      pinIcon.classList.toggle("hidden");
      unpinIcon.classList.toggle("hidden");

      toggleFavorite();
    });
  };

  document.addEventListener("astro:page-load", handlePageLoad);
</script>
